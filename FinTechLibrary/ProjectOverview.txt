FinTechLibrary is a C# class library to assist with financial analysis.

The Language of Programming
- Methods are actions. Therefore, methods should be verbs.
- Classes and object attributes should be nouns.

Elements of "Good" Object-Oriented Programming
- Data structures are classes that have no methods (actions). The purpose of data structures is to encapsolate data in a singlar concept (object).
- Interfaces will be used for two reasons:
	1. To enforce methods (actions) that must be implemented within a class that uses said interface.
	2. To eliminate redundant code, improve maintainability, and as a common object to ensure system scalability.
		> Example List<IFinancialOption> is a data container that can store any object that implementes the interface.
- Abstract classes will be used to outline default behaviors (aka methods) and attributes (aka properties) that will be passed to children classes through inheritance. 
	> Abstract classes cannot be instantiated.
- Object classes will be used to outline specific object implementations.
	> Object classes can be instantiated.
	> Overrides can be used to override methods of the abstract classes where it makes sense.
- Factory classes will be used as a form of abstraction. 
	> Factory classes are used to return a selected object based on a data structure selection provided to the factory.
	> Factory classes ensure that any if/switch statements are handled in the factory, not in the object classes and definitely not in the methods!
	> Factory classes (along with polymorphism) are what make large systems possible with minimal to no if/switch statements.
- Polymorphism will be used to control class implementation.


Clean Code
- We will follow the best practices outlined by Robert Martin in his book 'Clean Code: A Handbook of Agile Software Craftsmanship'
	- Your code should tell a clear story.
	- Your code should limit the amount of vertical scrolling. Related functions should be next to one another. Higher levels of abstraction will come first. 
	- Comments will be limited and not replace clear code design. Comments are failures to express yourself through code, clearly.
	- Functions will strive to use no parameters. 3 max with little exception. Anymore than 3 and the parameters likley could be encapsolated by a concept (class).
	- Vertical spacing will be tight between related concepts. Blank lines will only be used to seperate thoughts.
	- Each line of code will represent one idea.
	- Variables and functions will be well-named for clarity, always. Longer names are usually better than short names for the sake of clarity.
	- Functions should strive to be 4 lines or less. However, more is acceptable if you are using additional lines to reduce horizonal space and improve clarity. 
	- Fuctions should do one thing. 
		> This means that an if/switch statements should not be used except in object factories to switch between object instatiations.
